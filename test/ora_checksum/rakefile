#task :default => [:ssh_gcc_file]
task :default => [:ls_dir]

# if the file exist, this will fresh it.
def ftp_files(prefixToRemove, sourceFileList, targetDir, hostname, username, password)
  Net::FTP.open(hostname, username, password) do |ftp|
  begin
    puts "Creating dir #{targetDir}" 
    ftp.mkdir targetDir
  rescue 
    puts $!
  end
  sourceFileList.each do |srcFile|    
    if prefixToRemove
      targetFile = srcFile.pathmap(("%{^#{prefixToRemove},#{targetDir}}p")) 
    else
      targetFile = srcFile.pathmap("#{targetDir}/%f")
    end
    begin
      puts "Creating dir #{targetFile}" if File.directory?(srcFile)
      ftp.mkdir targetFile if File.directory?(srcFile)
    rescue 
      puts $!
    end
    begin
      puts "Copying #{srcFile} -> #{targetFile}" unless File.directory?(srcFile)
      ftp.putbinaryfile(srcFile, targetFile) unless File.directory?(srcFile)
    rescue 
      puts $!
    end
  end
  end
end
desc "Ftp file checksum.c"
task :ftp do
  require 'net/ftp'
  ftp_files(nil, ["checksum.c"], '/home/colin', '172.16.4.28', 'root', 'root')
end

desc "gcc it and test it!"
task :ssh_gcc_file=> :ftp  do
  require 'net/ssh'
  Net::SSH.start('172.16.4.28', 'root', :password => "root") do |ssh|
    ssh.exec!("LANG=C")
    oname = "/home/colin/occ"
    puts ssh.exec!("gcc -o #{oname} /home/colin/checksum.c")
#    puts ssh.exec!("time {#{oname} /home/colin/linux10g.dbf}")
    puts ssh.exec!("#{oname} /home/colin/linux10g.dbf")
  end
end

desc "ls"
task :ls_dir do
  require 'net/ssh'
  Net::SSH.start('172.16.4.28', 'root', :password => "root") do |ssh|
    puts ssh.exec!("ls -1F /Tbackup/app/shell")
  end
end